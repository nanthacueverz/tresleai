services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/bitnami
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic apponboard --describe" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - tresleai

  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
    ports:
      - "8080:8080"
    networks:
      - tresleai

  init-topics:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_started
    networks:
      - tresleai
    command: >
      sh -c "
      /opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic apponboard && 
      /opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic appdelete
      "

  tresleai-facade-service:
    build:
      context: .
      dockerfile: dev.Dockerfile
    depends_on:
      - kafka
    volumes:
      - ./configurations:/usr/src/app/configurations
      - cache_cargo:/usr/local/cargo
      - $HOME/.aws:/root/.aws:ro
    environment:
      - CONFIG_DIR=configurations
      - GLOBAL_YAML=.global.yaml
      - LOCAL_YAML=.local.yaml
      - AWS_PROFILE=dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - tresleai

volumes:
  cache_cargo:
  kafka_data:

networks:
  tresleai:
    driver: bridge
